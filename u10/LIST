l2	*2.5	Скомпилируйте и проверьте работу Date. Переработайте
			этот класс для представления даты в виде "количество
			дней после 1/1/1970"

l5	*2		Определите класс Histogram, который хранит числа из
			интервалов, указанных аргументами конструктора.
			Напишите функции для вывода гистограмм. Обрабатывайте
			ошибки выхода из диапазона значений.

l7	*2.5	Дополните класс Table возможностью храненния пар (имя,
			значение). Затем модифицируйте программу калькулятор из
			u6 таким образом, чтобы она использовала класс Table
			вместо map. Сравните две версии.

l8	*2		Перепишите Tnode из u7.l7 в виде класса с конструкторами,
			деструктором и т.д. Определите дерево с узлами Tnode в
			виде класса с конструкторами, деструкторами и т.д.

l9	*3		Определите, реализуйте и протестируйте класс Intset
			(множество целых). Предоставьте операции объединения
			множеств, пересечения и симметричной разности.

l10	*1.5	Модифицируйте класс Intset во множесто узлов Node,
			где Node - определяемая вами структура.

l11	*3		Определите класс для анализирования, хранения,
			вычисления и печати простых арифметических выражений,
			состоящих из целых констант и операции +, -, * и /.
			Открытый интерфейс должен выглядеть так:
			class Expr
			{
			//...
			public:
				Expr(const char *)
				int eval();
				void print();
			};
			Строковый аргумент конструктора Expr::Expr() является
			выражением. Функция Expr::eval() возвращает значение
			выражения, а Expr::print() выводит представление
			выражения в cout. Программа может выглядеть примерно
			так:
			Expr x("123/4+123*4-3");
			cout << "x=" << x.eval() << "\n";
			x.print();
			Определите класс Expr дважды: один раз для его
			представления выберите список связных узлов, а другой
			раз - строку. Поэкспериментируйте с разными способами
			печаты выражения: с полной расстановкой скобок, в
			постфиксной нотации и т.д.

l12 *2		Определите класс Char_queue так, чтобы открытый
			интерфейс не зависил от представления. Реализуйте
			Char_queue в виде (а) связного списка и (б) вектора.
			Не беспокойтесь о многопоточности.

l13	*3 		Разработайте класс таблицы символов и класс элементов
			этой таблицы для какго-либо языка. Посмотрите на
			какой-нибудь компилятор для этого языка, чтобы
			узнать, как в действительности выглядит таблица символов.

l14	*2		Модифицируйте класс выражений из l11 таким образом,
			чтобы он мог обрабатывать переменные и операцию
			присваивания. Воспользуйтесь классом таблицы символов
			из l13

l15	*1 		Дана программа:
			#include <iostream>
			int main()
			{
				std::cout << "Hello, World!\n";
			}
			Модифицируйте ее так, чтобы она выводила
			Initialize
			Hello, World!
			Clean up
			Не вносите при этом никаких изменений в функцию main().

l16	*2		Определите класс Calculator так, чтобы большая часть
			его реализации состояла из функции u6. Создавайте
			калькуляторы и активизируйте их для ввода из cin,
			коммандной строки, для строк программы. Реализуйте вывод
			в разне приемники.

l17	*2		Определите два класса, каждый со статическим членом, так,
			чтобы конструирование статического члена использовало ссылку
			на другой статический член. Где такое может встретиться
			в реальном коде? Как нужно модифицировать эти классы, чтобы
			устранить в конструкторах зависимость от порядка?

l19	*3		Напишите функцию, которая получает в качестве аргументов
			istream и vector<string>, а порождает map<string, vector<int>>,
			содержащий каждую строку и частоту ее вхождения. Прогоните
			программу на текстовом файле с количеством строк, не менее
			1000, разыскивая при это не менее 10 слов.

l20	*2		Возьмите класс Entry из C.8.2 и модифицируйте его таким
			образом, чтобы каждый член объединения всегда использовался
			в соответствии с его типом.

