2.  *2  Завершите и оттестируйте класс String из 11.12.
3.  *2  Определите класс INT, который ведет себя в точности как int.
        Подсказка: определите INT::operator int().
4.  *1  Определите класс RINT, который ведет себя как int,
        за исключением того, что допустимыми являются лишь
        +, - (унарные и бинарные), *, /, %.
        Подсказка: не определяйте RINT::operator int().
5.  *3  Определите класс LINT, который ведет себя как RINT, но для
        представления чисел использует по крайней мере 64 бита.
6.  *4  Определите класс с арифметикой произвольной точности.
        Протестируйте этот класс, вычислив факториал от 1000.
        Подсказка: вам потребуется управление памятью вроде того,
        что было сделано для класса String.
7.  *2  Для класса String определите внешний итератор:
        class String_iter
        {
            public:
            String_iter(String &s); // итератор для s
            char &next();           // ссылка на следующий элемент
            // иные операции по вашему выбор
        };
        Сравните это по удобству, стилю программирования и
        эффективности с внутренним итератором для String
        (в смысле понятия текущего элемента String и операций
        над этим элементом).
8.  1.5*Для строкового класса определите операцию выделения
        подстроки с помощью (). Какие операции вам еще нужны для
        работы со строками?
9.  3*  Разработайте класс String таким образом, чтобы операцию
        взятия подстроки можно было использовать в левой части
        операции присваивания. Сначала ограничьтесь версией, где
        длины подстроки и присваиваемой строки одинаковые. Затем
        напишите версию с разными длинами.
10. 2*  Напишите операцию для класса String, позволяющую получить
        содержимое в виде С-строки. Обсудите все за и против
        способа реализации этой операции в виде операции приведения
        типа. Обсудите возможные альтернативы выделения памяти под
        С-строку.
11. 2.5*Реализуйте простой механизм регулярных выражений для поиска
        в строках типа String.
12. 1.5*Модифицируйте механизм поиска из [11] для работы со
        стандартным классом string. Заметьте, что вы не можете
        модифицировать класс string.

